package com.sist.main;
/*
 *    자바 클래스의 구성 => 객체 지향 특성 (접근지정어, 캡슐화, 재사용, 수정, 추가)
 *    -------------                ㄴ public/protected/default/private/
 *                                 캡슐화 : 데이터 보호 => 모든 변수는 private
 *                                 재사용 : 변경해서 사용, 있는 그대로  
 *                                         상속(is-a)    포함(has-a)
 *                                 수정: 오버라이딩, 추가 :오버로딩
 *    class ClsasName              
 *    {                            
 *        ------------------------         
 *         변수   
 *         1) 멤버 변수 (인스턴스변수 => new 메모리에 저장할때 따로 저장되는 변수)
 *            가장 많이 사용되는 변수(여러개를 저장)
 *            형식) [접근지정어] 데이터형 변수명 = 값(디폴트값)
 *                  int a; ==> 0
 *                  int a=10;  // 명시적인 초기화 
 *                  
 *                  => int a;
 *                     a=10; ==> 구현 (클래스에서는 구현이 불가능) ==> 변수의 초기화(생성자를 이용해서 구현가능)
 *                  => 생성시점 : new를 이용해서 메모리 공간이 확보
 *                  => 소멸시점 : 객체=null이거나 사용하지 않는 경우
 *                             -------------------------- 가비지 컬렉터(메모리 회수)에 의해 소멸됨
 *                  => 사용하는 방법
 *                     class A
 *                     {
 *                         int age; ==> 0
 *                         String name; ==>null
 *                     }
 *                     A use = new A(); => age,name
 *                       ---   
 *                       객체,인스턴스(메모리에 저장된 상태)
 *                     => user.age
 *                     => user.name
 *                             
 *                     A user2 = new A(); => age name 
 *                     => user2.age
 *                     => user2.name      
 *                     ================ class는 한개만 설계 ==> 저장을 new를 이용해서 여러개
 *                     --user--
 *                주소값<= 100     => ------------
 *                     ---------      -------- age
 *                                      25
 *                                    -------- name
 *                                      홍길동
 *                                    --------
 *                                  ------------  
 *                     --user2--                      if) user2=user;이면 user2가 주소값100을 가르키게 되면서, 
 *                주소값<= 200     => ------------          주소값200에 있던 메모리는 GC(GarbageCollector)에 의해 소멸된다.    
 *                     ---------      -------- age        ==> 저장된 데이터 관리 위치를 변경 가능하다.(데이터 손실)
 *                                      23                ==> 메모리 주소의 복구가 어렵다.
 *                                    -------- name
 *                                      심청이
 *                                    -------- 
 *                                  ------------                
 *                     
 *                     
 *         2) 정적변수(클래스변수, 공유변수) => 한개의 공간만 생성
 *            => 공유변수  : 오라클
 *            형식) [접근지정어] static 데이터형 변수명 = 값(디폴트값)
 *                                               (멤버변수와 동일)
 *                                               int => 0
 *                                               double => 0.0
 *                                               boolean => false
 *                                               String,배열,클래스 => null(주소가 저장이 안된 상태)
 *                  
 *                  => 생성시점 : 컴파일러에 의해 자동으로 메모리에 저장
 *                  => new가 없어도 사용이 가능                               
 *        ------------------------
 *         생성자 :
 *           1) 객체가 생성될때 호출 메소드
 *              A a = new A()
 *                        --- 생성자
 *           2) 특징
 *              = 클래스명과 동일
 *              = 리턴타입이 없다
 *              = 생성자가 없는 경우(매개변수가 없는 생성자가 자동 추가)
 *                              ---------------
 *                              기본 생성자
 *              = 멤버 변수의 초기화
 *              = 생성자는 여러개 사용이 가능(한개의 클래스)
 *              = 데이터베이스 연결, 네트워크연결 , 윈도우...  
 *              = 자동추가
 *                -----
 *                import java.lang.*;
 *                       ------------ String, Math, System...
 *                class A extends Object
 *                        --------------
 *                
 *                생성자 : 기본생성자
 *                
 *                return : void
 *                
 *                             
 *              class A
 *              {
 *                 A(){} -----------O ==> 생성자
 *                 void A(){} ------X ==> 일반 메소드
 *                 A(int a){} ------O ==> 생성자(오버로딩)
 *                 A(int a,int b){}-O ==> 생성자(오버로딩)
 *              }
 *           3) 역할 
 *              = 시작과 동시에 처리
 *                예) 자동 로그인
 *                   오라클 연결
 *                   서버 연결 ...
 *              = 멤버변수의 초기화
 *                class A
 *                {
 *                    int a;
 *                    A()
 *                    {
 *                        a=10;
 *                        // 파일읽기, 크롤링 ...
 *                        = 구현해서 초기화
 *                        ex) init()
 *                    }
 *                }  
 *                class A
 *                {
 *                    int a=10;
 *                }      
 *                = 필요시마다 사용한다. (생략할 수 있다.)
 *                                  ---- 컴파일러에 의해 자동으로 추가         
 *        ------------------------
 *         메소드:
 *           1) 역할 => 다른 클래스 와 통신(연결)
 *           2) 수정, 추가(오버라이딩, 오버로딩)
 *           3) 반복제거
 *           4) 구조적인 프로그램을 짤때(단락을 나눠서 처리) => 오류, 수정을 편리하게 하기위해
 *           5) 메소드는 호출시마다 처음부터 끝까지
 *           6) 구성 요소
 *              결과값 (리턴 타입)
 *                => 리턴 타입으로 사용
 *                   기본형
 *                   int, double, char, boolean, long ..
 *                   배열 : 같은 데이터형 여러개
 *                   int[], double[]... 
 *                   클래스 :다른 데이터형 여러개
 *                         --
 *                   String, 사용자 정의
 *                   => 클래스는 배열로도 사용이 가능(데이터형)
 *                => 기본형(자바에서 지원)은 지원하지 않는 것이 많기 때문에
 *                   프로그래머가 만들어서 처리하는데 ==> 클래스
 *                                              클래스의 기능 => 사용자 정의 데이터형
 *                                              ---- 형변환, 대입 ...(기본형과 동일하게 사용이 가능하다.)	 
 *                          
 *              메소드명 : 식별자(규칙,약속) => 변수, 클래스, 인터페이스 ==> (동일)
 *                       => 변수, 메소드 ==> (시작)소문자
 *                       => 클래스 , 인터페이스 ==> (시작)대문자
 *                       => 문자길이는 상관없다. (3~10자 권장) ==> 보통 최대 7자로 압축
 *                       => 한글은 가급적 사용하지 않는다.
 *                          
 *              매개변수(사용자 요청)
 *              *** 사용자의 요청값을 받아서 요청 처리 결과를 도출
 *              *** 최소화 시킨다 (3개 이상이면 => 배열, 클래스)
 *              예) 
 *                 정수 10개를 보내주고 정렬 후 보내시오.
 *                 (int a, int b, int c ...) ==> X
 *                 (int[] arr) ==> O
 *                 
 *                 회원 가입
 *                 (String id, String pwd, String name,
 *                  String sex, int age, String post ...) ==> X
 *                              --- 다른 데이터형 존재
 *                 (Member m) ==> 클래스 데이터형 ==> O
 *                 
 *              메소드 유형
 *                 => 리턴타입 (X or 한개만 존재)
 *                 => 매개변수 (X or 한개 이상)
 *              ----------------------
 *                리턴타입        매개변수
 *              ----------------------
 *                  O            O  ==> 가장 많이 사용
 *                                      자바에서 브라우저로 데이터를 보내기때문에
 *              ----------------------
 *                  O            X 
 *              ----------------------
 *                  X            O
 *              ----------------------   
 *                  X            X
 *              ----------------------   
 *              
 *               메소드 형식
 *               [접근지정어][옵션] 리턴타입 메소드명(매개변수..)  => 선언부
 *                             ----- 결과값   -------요청값
 *               {
 *                   옵션: static, abstract, final  
 *                   => 구현부
 *                   => 연산/제어
 *                   return 값; => void일 경우에는 생략이 가능
 *               }
 *                
 *        ------------------------
 *        
 *    }
 *    
 */
public class 생성자_1 {
//	 생성자_1(){} 자동으로 추가 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		return; // 컴파일러가 자동추가
		생성자_1 a = new 생성자_1();
//		System.out.println(a.toString()); ==> Object라는 superclass가 자동으로 추가

	}

}
